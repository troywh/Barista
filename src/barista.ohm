Barista {
  Program   = Statement+
  Statement = Assignment
            | Call
            | serve (Exp)?										          -- return
            | print (Exp | strlit)                      -- print
            | if Exp Block ElIf* (else Block)?          -- ifstmt
            | Exp Type id				                        -- vardec
            | true | false id					                  -- booldec
            | order id "(" Params ")" FunReturn? Block  -- fundec
            | item id "{" Statement* "}"						    -- classdec
            | blend while Exp Block                     -- while
            | blend Block until Exp                     -- dowhile
  FunReturn = "->" Type
  ElIf      = else if Exp Block
  Block     = "{" Statement* "}"
  
  Assignment  = (this ".")? id "=" Exp                  -- plain
              | add Exp to id                           -- increment

  Exp         = ("-" | "!") Term                        -- unary
              | OrExp "?" OrExp ":" Exp                 -- ternary
              | OrExp
  OrExp       = OrExp "||" AndExp                       -- binary
              | AndExp
  AndExp      = AndExp "&&" CmpExp                      -- binary
              | CmpExp
  CmpExp      = AddExp ("less than equal to"
                      | "less than"
                      | "not equal to"
                      | "equal to"
                      | "greater than equal to"
                      | "greater than") AddExp          -- binary
              | AddExp
  AddExp      = AddExp ("+" | "-") MulExp	              -- binary
              | MulExp
  MulExp      = MulExp ("*" | "/" | "%") ExpExp         -- binary
              | ExpExp
  ExpExp      = Term "**" ExpExp                        -- binary
              | Term
  Term        = numlit
              | true
              | false
              | Call
              | ((id | this) ".")? id                   -- id
              | "(" Exp ")"                             -- parens

  Call        = id "(" Args ")"
  Params      = ListOf<id, ",">
  Args        = ListOf<Exp, ",">
  
  Type	      = id | bool
  
  order       = "order" ~idchar
  while       = "while" ~idchar
  repeat      = "repeat" ~idchar
  until       = "until" ~idchar
  true        = ("YES" | "Yes" | "yes") ~idchar
  false       = ("NO" | "No" | "no") ~idchar
  print       = "print" ~idchar
  serve		    = "serve" ~idchar
  if	        = "if" ~idchar
  else        = "else" ~idchar
  blend       = "blend" ~idchar
  stop        = "stop" ~idchar
  add         = "add" ~idchar
  to          = "to" ~idchar
  item        = "item" ~idchar
  this        = "this" ~idchar
  bool        = "with" ~idchar
  comment     = "<comment>" | "</comment>"
  
  keyword   = order | while | true | false | print | serve | if | else | blend | stop | repeat | until | add | to | item | this | comment | bool
  numlit    = digit+ ("." digit+)?
  strlit		= "\"" (~"\"" (any))* "\""
  id        = ~keyword idchar+
  idchar    = letter | digit | "_"
  space     += "<comment>" (~"</comment>" any)* "</comment>"  -- comment
}